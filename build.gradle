plugins {
    id "java-library"
    id "java-test-fixtures"
    id "jacoco"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id "com.diffplug.spotless" version "6.25.0"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "pl.allegro.tech.build.axion-release" version "1.17.0"
    id "org.sonarqube" version "4.4.1.3373"
    id "com.adarshr.test-logger" version "4.0.0"
    id "nebula.lint" version "19.0.1"
}

group "com.github.michaelruocco"

ext {
    slf4jVersion = "2.0.12"
    lombokVersion = "1.18.30"
    jacksonVersion = "2.16.2"

    junitVersion = "5.10.2"
    jsonUnitAssertJVersion = "3.2.7"
    testContainersVersion = "1.19.7"
    assertJVersion = "3.25.3"
    mockitoVersion = "5.11.0"
}

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "${name}-"
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

gradleLint {
    rules = ['all-dependency']
    alwaysRun = false
}

testing {
    suites {
        integrationTest(JvmTestSuite) {}
    }
}

configurations {
    testImplementation.extendsFrom testFixturesImplementation
    integrationTestImplementation.extendsFrom testFixturesImplementation
    integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api 'com.github.michaelruocco:json-adapter:1.0.4'
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "com.github.mizosoft.methanol:methanol:1.7.0"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "org.apache.httpcomponents:httpclient:4.5.14"
    implementation "org.apache.httpcomponents:httpcore:4.4.16"


    testFixturesCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testFixturesImplementation "com.github.michaelruocco:file-loader:7.0.2"
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

testing {
    suites {
        configureEach {
            useJUnitJupiter(junitVersion)
            dependencies {
                runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
                runtimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
                implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
                implementation "org.assertj:assertj-core:${assertJVersion}"
                implementation "net.javacrumbs.json-unit:json-unit-assertj:${jsonUnitAssertJVersion}"
                implementation "org.mockito:mockito-core:${mockitoVersion}"
            }
        }
        integrationTest {
            dependencies {
                runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
                runtimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
                implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
                implementation "org.assertj:assertj-core:${assertJVersion}"
                implementation "net.javacrumbs.json-unit:json-unit-assertj:${jsonUnitAssertJVersion}"
                implementation "org.mockito:mockito-core:${mockitoVersion}"

                compileOnly "org.projectlombok:lombok:${lombokVersion}"
                annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
                implementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
                implementation "org.testcontainers:testcontainers:${testContainersVersion}"
                implementation "org.testcontainers:mockserver:${testContainersVersion}"
            }
        }
        test {
            targets {
                configureEach {
                    testTask.configure {
                        systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
                    }
                }
            }
        }
    }
}

testlogger {
    theme 'mocha'
    showStandardStreams true
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
    }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport
sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "michaelruocco"
        property "sonar.projectKey", "michaelruocco_${name}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

def gitUrl = "https://github.com/michaelruocco/camunda-rest-client"
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "mruoc"
            name "Michael Ruocco"
            email "michael.ruocco@hotmail.com"
        }
    }

    scm {
        url gitUrl
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

publishing {
    publications {
        lib(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "Template repo to speed up creating new library projects")
                root.appendNode("name", project.name)
                root.appendNode("url", gitUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

signing {
    def signingKey = System.getenv("OSSRH_PGP_SECRET_KEY")
    def signingPassword = System.getenv("OSSRH_PGP_SECRET_KEY_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.lib
}
signLibPublication.enabled = gradle.startParameter.taskNames.contains("publishToSonatype")

spotless {
    java {
        palantirJavaFormat("2.28.0")
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}
